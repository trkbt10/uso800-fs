/**
 * Optional LLM orchestrator for Uso800FS (pattern mirrored from usodb-llm).
 *
 * Provides two tool patterns:
 * - emit_fs_listing: create dirs/files under a given folder
 * - emit_file_content: return content for a given file path
 *
 * Client injection follows the minimal surface { responses.stream(...) } to keep loose coupling.
 */
import type { FsState } from "../fakefs/state";
import { ensureDir, putFile } from "../fakefs/state";

// Minimal client surface (mirrors agents usage in usodb-llm)
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type OpenAIResponsesLike = { responses: { stream: any } };

export function createUsoFsLLMInstance(client: OpenAIResponsesLike, args: { model: string; instruction?: string; state: FsState }) {
  async function fabricateListing(folderPath: string[]): Promise<void> {
    const prompt = [
      "You fabricate a directory listing for the given folder.",
      "Use the provided tool to create directories/files. Avoid textual output.",
      "REQUEST=" + JSON.stringify({ path: folderPath.join("/") || "/" }),
    ].join("\n\n");
    // For brevity, this is a stub. A production version would mirror runToolCallStreaming() style.
    // Here we simply ensure the folder exists and drop a placeholder file.
    ensureDir(args.state, folderPath);
    putFile(args.state, [...folderPath, "_llm_note.txt"], "Generated by LLM orchestrator stub", "text/plain");
  }

  async function fabricateFileContent(pathParts: string[]): Promise<string> {
    const prompt = [
      "You fabricate a file content for the given path.",
      "Emit fabricated but plausible content. Avoid textual output outside the tool.",
      "REQUEST=" + JSON.stringify({ path: pathParts.join("/") || "/" }),
    ].join("\n\n");
    // Stub: return a simple content. Extend with responses.stream as in usodb-llm.
    return `# Fabricated content for ${pathParts.join("/")}`;
  }

  return { fabricateListing, fabricateFileContent };
}

